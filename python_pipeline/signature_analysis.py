"""Signature analysis on malignant epithelial clusters."""\n\nfrom __future__ import annotations\n\nfrom pathlib import Path\nfrom typing import Dict, List\nimport os\nfrom concurrent.futures import ThreadPoolExecutor\n\nimport anndata as ad\nimport gseapy as gp\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport pandas as pd\nimport scanpy as sc\n\nfrom . import config\nfrom .utils.io import ensure_dirs\nfrom .utils.logging import get_logger\n\nLOGGER = get_logger(__name__)\n\n\ndef load_malignant_data() -> ad.AnnData:\n    path = config.DEFAULT_OUTPUT_SUBDIRS["malignant"] / "tumor_epithelial.h5ad"\n    if not path.exists():\n        raise FileNotFoundError("Run step06_tcga_malignant.py first to create tumor_epithelial.h5ad")\n    adata = ad.read_h5ad(path)\n    malignant = adata[adata.obs["malignant_label"] == "malignant"].copy()\n    LOGGER.info("Loaded %d malignant cells", malignant.n_obs)\n    return malignant\n\n\ndef recluster(adata: ad.AnnData) -> None:\n    adata.obs_names_make_unique()\n    adata.var_names_make_unique()\n\n    try:\n        has_negative = float(adata.X.min()) < 0\n    except Exception:\n        has_negative = False\n    already_logged = bool(adata.uns.get('log1p')) or has_negative\n\n    if not already_logged:\n        sc.pp.normalize_total(adata, target_sum=1e4)\n        sc.pp.log1p(adata)\n    else:\n        LOGGER.info('Malignant subset appears log-normalized; skipping normalize_total/log1p')\n\n    hv_mask = None\n    if has_negative and 'highly_variable' in adata.var:\n        mask = adata.var['highly_variable'].to_numpy().astype(bool)\n        if mask.sum() == 0:\n            LOGGER.warning('Existing highly_variable mask empty; recomputing for malignant subset')\n            sc.pp.highly_variable_genes(adata, n_top_genes=config.N_HVG, subset=False, flavor='pearson_residuals')\n            hv_mask = adata.var['highly_variable'].to_numpy().astype(bool)\n        else:\n            LOGGER.info('Using existing highly_variable mask with %d genes', int(mask.sum()))\n            hv_mask = mask\n    else:\n        sc.pp.highly_variable_genes(adata, n_top_genes=config.N_HVG, subset=False, flavor='seurat_v3')\n        hv_mask = adata.var['highly_variable'].to_numpy().astype(bool)\n\n    if hv_mask is None or hv_mask.sum() == 0:\n        LOGGER.warning('No highly variable genes detected in malignant subset; using all genes')\n        hv_mask = np.ones(adata.n_vars, dtype=bool)\n\n    adata.var['highly_variable'] = hv_mask\n    sc.pp.scale(adata)\n    if np.isnan(adata.X).any():\n        LOGGER.warning('NaNs detected after scaling malignant subset; replacing with zeros')\n        adata.X = np.nan_to_num(adata.X, nan=0.0, posinf=0.0, neginf=0.0)\n    sc.tl.pca(adata, n_comps=config.N_PCS, use_highly_variable=True)\n    sc.pp.neighbors(adata, n_pcs=config.N_PCS)\n    sc.tl.umap(adata)\n    sc.tl.tsne(adata, random_state=config.SEED_TSNE)\n    sc.tl.leiden(adata, resolution=0.1, key_added='malignant_clusters')\n    adata.obs['celltype'] = 'G' + adata.obs['malignant_clusters'].astype(str)\n\n\ndef compute_markers(adata: ad.AnnData) -> pd.DataFrame:\n    sc.tl.rank_genes_groups(\n        adata,\n        groupby="malignant_clusters",\n        method="wilcoxon",\n        n_genes=100,\n        use_raw=False,\n    )\n    return sc.get.rank_genes_groups_df(adata, None)\n\n\ndef plot_go_dotplot(enriched: pd.DataFrame, out_dir: Path, *, top_terms_per_cluster: int = 10, max_terms: int = 30) -> None:\n    if enriched.empty:\n        return\n    plot_dir = out_dir / 'go'\n    plot_dir.mkdir(parents=True, exist_ok=True)\n\n    records = []\n    for cluster, df in enriched.groupby('cluster'):\n        subset = df.sort_values('Adjusted P-value').head(top_terms_per_cluster)\n        subset = subset.assign(cluster=str(cluster))\n        records.append(subset)\n    if not records:\n        return\n    plot_df = pd.concat(records, ignore_index=True)\n    plot_df['term'] = plot_df['Term'].str.slice(0, 60)\n    plot_df['neg_log10_adj_p'] = -np.log10(plot_df['Adjusted P-value'].clip(lower=1e-300))\n    plot_df['gene_count'] = plot_df['Genes'].str.split(r'[;,]').apply(lambda x: len([g for g in x if g]))\n\n    top_terms = (\n        plot_df.sort_values('Adjusted P-value')\n        .groupby('term', as_index=False)\n        .first()\n        .sort_values('Adjusted P-value')\n        .head(max_terms)['term']\n    )\n    plot_df = plot_df[plot_df['term'].isin(top_terms)]\n\n    plt.figure(figsize=(8, max(4, len(top_terms) * 0.35)))\n    sns.scatterplot(\n        data=plot_df,\n        x='cluster',\n        y='term',\n        size='gene_count',\n        hue='neg_log10_adj_p',\n        palette='Reds',\n        sizes=(20, 200),\n        edgecolor='black',\n        linewidth=0.3,\n    )\n    plt.xlabel('Cluster')\n    plt.ylabel('GO term')\n    plt.title('GO Biological Process enrichment')\n    plt.legend(title='-log10 adj p', bbox_to_anchor=(1.05, 1), loc='upper left')\n    plt.tight_layout()\n    plt.savefig(plot_dir / 'go_dotplot.png', dpi=300)\n    plt.close()\n\n\ndef plot_go_heatmap(enriched: pd.DataFrame, out_dir: Path, *, top_terms: int = 15) -> None:\n    if enriched.empty:\n        return\n    plot_dir = out_dir / 'go'\n    plot_dir.mkdir(parents=True, exist_ok=True)\n\n    heat_df = (\n        enriched.sort_values('Adjusted P-value')\n        .groupby(['cluster', 'Term'], as_index=False)\n        .first()\n    )\n    heat_df['neg_log10_adj_p'] = -np.log10(heat_df['Adjusted P-value'].clip(lower=1e-300))\n    heat_df['Term'] = heat_df['Term'].str.slice(0, 60)\n\n    top_terms = (\n        heat_df.sort_values('Adjusted P-value')\n        .drop_duplicates('Term')\n        .head(top_terms)['Term']\n    )\n    heat_df = heat_df[heat_df['Term'].isin(top_terms)]\n    if heat_df.empty:\n        return\n\n    pivot = heat_df.pivot(index='Term', columns='cluster', values='neg_log10_adj_p').fillna(0)\n    plt.figure(figsize=(6, max(4, len(pivot) * 0.4)))\n    sns.heatmap(pivot, cmap='Reds', linewidths=0.3, linecolor='white')\n    plt.title('GO BP enrichment (-log10 adj p)')\n    plt.tight_layout()\n    plt.savefig(plot_dir / 'go_heatmap.png', dpi=300)\n    plt.close()\n\ndef go_enrichment(markers: pd.DataFrame, out_dir: Path, top_n: int = 50) -> pd.DataFrame:\n    records: List[pd.DataFrame] = []\n    for cluster, df in markers.groupby("group"):\n        genes = df.head(top_n)["names"].tolist()\n        if not genes:\n            continue\n        enr = gp.enrichr(gene_list=genes, gene_sets="GO_Biological_Process_2021", organism="Human", outdir=None)\n        if enr.res2d is None:\n            continue\n        res = enr.res2d.assign(cluster=cluster)\n        records.append(res)\n    if not records:\n        return pd.DataFrame()\n    enriched = pd.concat(records, ignore_index=True)\n    output_csv = out_dir / "go_enrichment.csv"\n    enriched.to_csv(output_csv, index=False)\n    plot_go_dotplot(enriched, out_dir)\n    plot_go_heatmap(enriched, out_dir)\n    return enriched\n\n\ndef run_step7_signatures() -> None:\n    out_dir = config.DEFAULT_OUTPUT_SUBDIRS["signatures"]\n    ensure_dirs([out_dir])\n    sc.settings.figdir = str(out_dir)\n\n    adata = load_malignant_data()\n    recluster(adata)\n    markers = compute_markers(adata)\n    markers.to_csv(out_dir / "malignant_markers.csv", index=False)\n    sc.pl.tsne(adata, color=["malignant_clusters", "celltype"], save="_clusters.png", show=False)\n    stemness_genes = [g for g in ["CD44", "PROM1", "LGR5", "SOX2", "CXCR4", "TFRC"] if g in adata.var_names]\n    if stemness_genes:\n        sc.pl.dotplot(\n            adata,\n            groupby="malignant_clusters",\n            var_names=stemness_genes,\n            standard_scale="var",\n            save="_stemness_dotplot.png",\n            show=False,\n        )\n    else:\n        LOGGER.warning('No stemness genes detected in malignant subset; skipping dotplot')\n    go_enrichment(markers, out_dir)\n    adata.write_h5ad(out_dir / "malignant_clusters.h5ad")\n\n